# Stubs for cryptography.hazmat.primitives.asymmetric.rsa (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc
from typing import Any

class RSAPrivateKey(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def signer(self, padding: Any, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def decrypt(self, ciphertext: Any, padding: Any) -> Any: ...
    def key_size(self) -> Any: ...
    @abc.abstractmethod
    def public_key(self) -> Any: ...
    @abc.abstractmethod
    def sign(self, data: Any, padding: Any, algorithm: Any) -> Any: ...

class RSAPrivateKeyWithSerialization(RSAPrivateKey, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def private_numbers(self) -> Any: ...
    @abc.abstractmethod
    def private_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any) -> Any: ...

class RSAPublicKey(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def verifier(self, signature: Any, padding: Any, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def encrypt(self, plaintext: Any, padding: Any) -> Any: ...
    def key_size(self) -> Any: ...
    @abc.abstractmethod
    def public_numbers(self) -> Any: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: Any, format: Any) -> Any: ...
    @abc.abstractmethod
    def verify(self, signature: Any, data: Any, padding: Any, algorithm: Any) -> Any: ...
RSAPublicKeyWithSerialization = RSAPublicKey

def generate_private_key(public_exponent: Any, key_size: Any, backend: Any): ...
def rsa_crt_iqmp(p: Any, q: Any): ...
def rsa_crt_dmp1(private_exponent: Any, p: Any): ...
def rsa_crt_dmq1(private_exponent: Any, q: Any): ...
def rsa_recover_prime_factors(n: Any, e: Any, d: Any): ...

class RSAPrivateNumbers:
    def __init__(self, p: Any, q: Any, d: Any, dmp1: Any, dmq1: Any, iqmp: Any, public_numbers: Any) -> None: ...
    p: Any = ...
    q: Any = ...
    d: Any = ...
    dmp1: Any = ...
    dmq1: Any = ...
    iqmp: Any = ...
    public_numbers: Any = ...
    def private_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class RSAPublicNumbers:
    def __init__(self, e: Any, n: Any) -> None: ...
    e: Any = ...
    n: Any = ...
    def public_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
